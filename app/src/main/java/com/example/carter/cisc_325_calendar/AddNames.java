package com.example.carter.cisc_325_calendar;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.design.widget.FloatingActionButton;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.*;
import android.widget.*;

import java.util.ArrayList;
import java.util.List;

public class AddNames extends AppCompatActivity {
    private EditText emailInpt; //textbox at top of screen
    ArrayList<String> list = new ArrayList<>(); //basically the back-end of adapter. Use adapter.add instead of list.add
    ArrayAdapter<String> adapter; //an android thing for displaying listViews on screen

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        //initialization stuff
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_names);

        //get references to objects created in content_add_names.xml
        emailInpt = (EditText) findViewById(R.id.emailInpt);
        ListView emailList = (ListView) findViewById(R.id.emailList);
        Button button = (Button) findViewById((R.id.button));

        adapter = new MyListAdapter(this, R.layout.list_item, list); //hook adapter up to the ArrayList list
        emailList.setAdapter(adapter); //hook adapter up to the ListView emailList

        //on button click, add blank email to emailList (there's a callback below that instantiates the input field and remove button)
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                adapter.add(emailInpt.getText().toString()); //add element into the ListView
                emailInpt.setText(""); //reset input text
            }
        });

        //when enter is pressed
        /*
        emailInpt.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                String input = emailInpt.getText().toString();
                if (list.size() == 0 && input.length() > 0) {
                    adapter.add(v); //should hold something more substantial
                }
                return false;
            }
        });
        */

        //not sure what this does
        //Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        //setSupportActionBar(toolbar);

        //stuff for handling the pink mail icon in the bottom-right corner
        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                //this was auto generated by android studio
                //Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG).setAction("Action", null).show();
                //switch activity to GenerateAvailability.java
                Intent myIntent = new Intent(view.getContext(), GenerateAvailability.class);
                startActivity(myIntent);
            }
        });
    }
    /*
    //more android studio generated stuff
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_add_names, menu);
        return true;
    }
    */
    /*
    //auto generated
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.action_settings) {
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
    */
    //This allows the buttons in the list to be clickable
    private class MyListAdapter extends ArrayAdapter<String> {
        private int layout;
        public MyListAdapter(Context context, int resource, List<String> objects) {
            super(context, resource, objects);
            layout = resource; //in our case this is R.layout.list_item, which is an xml layout I made
        }

        //called when an object from the list comes on screen (I think)
        @Override
        public View getView(final int position, View view, ViewGroup parent) {
            ViewHolder holder; //simple class for holding and initializing a Button and EditText object
            if (view == null) { //if item in ListView emailList hasn't been initialized
                LayoutInflater inflater = LayoutInflater.from(getContext());
                view = inflater.inflate(layout, parent, false); //initialize the list_item
                holder = new ViewHolder();
                holder.position = position; //this will be updated as objects are deleted
                holder.inpt = (EditText) view.findViewById(R.id.emailInpt); //fetches EditText object from view
                holder.inpt.setText(adapter.getItem(position)); //set it to the text stored in ArrayList<String> list
                holder.setInptEditListener(); //This callback is triggered whenever the user edits an email text entry
                holder.minus = (Button) view.findViewById(R.id.minus); //red minus button
                holder.setMinusClickListener(); //This callback is triggered when the minus button is tapped
                view.setTag(holder); //save holder so we can get it later using view.getTag()
            } else { //if item has already been initialized
                holder = (ViewHolder) view.getTag(); //retrieve saved ViewHolder
                holder.position = position;
            }
            holder.inpt.setText(adapter.getItem(position));

            return view; //I think this is what it displays on-screen?
        }
    }

    //a custom class for easily storing components from list_item, used only in the class above
    public class ViewHolder {
        int position; //only reason this class exists is so we can dynamically update position in the callback functions
        EditText inpt;
        Button minus;

        public void setInptEditListener() {
            inpt.setOnEditorActionListener(new TextView.OnEditorActionListener() {
                @Override
                public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                    String input = v.getText().toString();
                    list.set(position, input);
                    adapter.notifyDataSetChanged();
                    Toast.makeText(AddNames.this, "edited text at position: " + position, Toast.LENGTH_SHORT).show();
                    //keeps an empty element at the bottom of the list
                    if (input.length() > 0 && position == list.size()-1) {
                        adapter.add("");
                    }
                    return false; //dunno what this is for
                }
            });
        }

        public void setMinusClickListener() {
            minus.setOnClickListener(new View.OnClickListener() {
                //need to find a way to pass the local var position into this function
                @Override
                public void onClick(View v) {
                    Toast.makeText(AddNames.this, "touched minus button at position " + position, Toast.LENGTH_SHORT).show();
                    list.remove(position); //remove this element from the array
                    adapter.notifyDataSetChanged();
                }
            });
        }
    }

}
